절차적으로 어떻게 되는지 알 필요 없고 필요한게 무엇인지 시스템이 알아서 처리(이번 경우에는 DBMS)

예) 몬스터중 가장 power가 높은 녀석을 찾겠다
절차적
:for문 돌려서 하나씩 찾음


✅ 선언형 프로그래밍(Declarative Programming)이란?

**“무엇(What)을 할 것인지를 기술하는 방식”**의 프로그래밍 패러다임이에요.

즉, 어떻게(How) 처리할지는 시스템(DBMS 등)에 맡기고,
개발자는 “무엇을 원하는지”만 명시하는 거예요.

✅ 절차형(명령형) 프로그래밍 vs 선언형 프로그래밍 비교
구분	절차형(Imperative)	      선언형(Declarative)
방식	어떻게 처리할지를 명시	   무엇을 원하는지를 명시
제어	루프, 조건문 등 사용	   내부적으로 최적화되어 처리
예시	Python, Java, C	        SQL, HTML, Prolog
초점	절차와 흐름 제어    	결과의 명세
✅ 선언형 프로그래밍의 대표 예: SQL (DBMS)
예시 상황:

**고객 테이블(customer)**에서 나이가 30 이상인 고객의 이름을 가져오고 싶다고 할 때,

선언형(SQL 사용)
SELECT name
FROM customer
WHERE age >= 30;


위 SQL 문은 **“어떤 데이터를 원하는지”**를 명확히 기술하지만,
어떻게 데이터를 스캔하고 정렬하고 필터링할지는 전혀 안 나와요.

→ 이 모든 처리는 DBMS가 내부적으로 최적화해서 수행해줍니다.
(ex: 인덱스 활용, 병렬 처리, 실행 계획 등)

✅ DBMS에서 선언형 프로그래밍의 장점
장점	설명
✅ 생산성 향상	복잡한 절차 없이 원하는 결과를 간단하게 기술 가능
✅ 유지보수 용이	로직이 복잡하지 않고 읽기 쉬움
✅ 성능 최적화는 DBMS가 담당	인덱스, 캐시, 실행계획 등을 DBMS가 자동 적용
✅ 병렬 처리 가능	DBMS가 병렬 실행, 분산 처리 등을 내부적으로 처리
✅ 정리: 선언형 vs 절차형 in DBMS

SQL은 선언형 언어입니다.

**“무슨 데이터를 원하는지”**만 작성하면,
DBMS가 나머지 작업을 최적화해서 실행해줘요.

반대로, PL/SQL, T-SQL의 루프나 조건문 등은 절차형 요소를 포함합니다.

필요하다면 SQL 내부에서 절차형 + 선언형을 혼용할 수도 있어요.
(ex: Stored Procedure나 Function 내에서 루프 + SQL 사용)