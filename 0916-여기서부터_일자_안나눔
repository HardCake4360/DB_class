1. 키
무엇인가를 유일하게 식별하는 것
키: 속성 또는 속성의 집합
키가 되는 속성은 반드시 값이 달라서 투플들을 서로 구별할 수 있어야 함

Super Key: 투플을 유일하게 식별할 수 있는 하나의 속성 혹은 속성의 집합
인공 키: 식별 가능하도록 인공적으로 생성한 속성
후보 키: 투플을 유일하게 식별할 수 있는 속성의 "최소 집합" ->복합 키: 두개 이상의 속성으로 이뤄지는 키
기본 키(primary key): 여러 후보 키 중 하나를 선정하여 대표로 삼는 키
    릴레이션 내 투플을 식별할 수 있는 고유한 값을 가져야 함
    NULL값은 허용하지 않음
    키 값의 변동이 일어나지 않아야 함
    최대한 적은 수의 값을 가진 것이어야 함
    향후 키를 사용하는 데 있어서 문제 발생의 소지가 없어야 함
대리(인공) 키: 
    기본키가 보안성이 필요함
    여러개의 속성으로 이뤄져 복잡함
    마땅한 기본 키가 없는 경우
    -> 일련번호같은 가상의 속성을 만들어 기본 키로 삼음
외래 키:
    다른 릴레이션의 기본 키를 참조하는 속성
    
    참조하고, 참조되는 양쪽 릴레이션의 도메인이 서로 같아야 함 
    - 외래키의 값이 null이라면?(도메인이 같아야하는데 null은 어떻게 할건데???) -> null은 제외함
    
    참조하는 외래키 값이 참조되는 기본 키 값에 연동되어 항상 데이터의 일관성이 유지됨 
    - 이때문에 기본키는 안 바뀌는게 좋음
    - 참조하는 값이 갑자기 삭제되거나 수정된다면 외래키는 뭐가 되지?
        -일단 null로 바꾼다
        -디폴트 값으로 바꾼다
        -삭제하지 말라고 시위를 한다(???) 이게 아니라 일단 삭제하지 않고 둔다. 자료가 필요 없어질 때까지 버팀
        -참조를 전부 삭제하고 그 다음에 참조당하는 것들을 삭제한다 **가장 무식하고 쉬운 방법** 절대 따라하지 마시오

    외래 키 사용 시 참조하는 릴레이션과 참조되는 릴레이션이 꼭 다른 릴레이션일 필요는 없음
    값이 null일 수 있음

기본&외래 키: 데이터의 중복을 줄이는 가장 좋은 방법

2. 무결성 제약조건
-데이터 무결성(data integrity): 중복저장 최소화를 보장한다
    데이터베이스에 저장된 데이터의 일관성과 정확성을 지키는 것
    일관성과 정확성을 바탕으로 구축된 데이터베이스가 계속해서 무결성을 유지하려면
    투플의 삽입,삭제,수정 시 데이터의 제약조건 준수 여부를 확인해야함

    -도메인 무결성 제약조건(domain integrity constraints)
        도메인 제약: 릴레이션 내의 투플들이 각 속성의 도메인에 지정된 값만 가져야 한다는 조건

    -개체 무결성 제약조건(primary key constraints)
        기본 키 제약: 릴레이션은 기본 키를 지정하고 그에 따른 무결성 원칙
        (기본키는 null값을 가져가서는 안되며 릴레이션 내에 오직 하나의 값만 존재해야한다)을 지켜야 한다는 조건

    -참조 무결성 제약조건(referential integrity constraints)
        외래 키 제약: 릴레이션 간의 참조 관계를 선언하는 제약조건
        자식 릴레이션의 외래 키는 부모 릴레이션의 기본 키와 도메인이 같아야하며,
        부모 릴레이션의 값이 변경될 때 제약을 받는다
        
3. 무결성 제약조건의 수행
    부모 릴레이션에서 투플을 삭제할 때 참조 무결성 제약 조건을 수행하기 위한 옵션

    RESTRICTED 
        자식 릴레이션에서 참조하고 있으면 부모 릴레이션의 삭제 작업을 거부함

    CASCADE
        자식 릴레이션의 관련 투플을 같이 삭제함

    DEFAULT
        자식 릴레이션의 관련 투플을 미리 설정해둔 값으로 변경함
    
    NULL
        자식 릴레이션의 관련 투플을 NULL 값으로 설정함(NULL값이 허용된 경우만 가능) 

